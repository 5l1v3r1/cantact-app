/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cantact.ui;

import java.util.HashMap;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.cantact.core.CanFrame;
import org.cantact.core.CanListener;
import org.cantact.core.DeviceManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.cantact.ui//Live//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LiveTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.cantact.ui.LiveTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LiveAction",
        preferredID = "LiveTopComponent"
)
@Messages({
    "CTL_LiveAction=Live",
    "CTL_LiveTopComponent=Live Window",
    "HINT_LiveTopComponent=This is a Live window"
})


public final class LiveTopComponent extends TopComponent implements CanListener {

    public LiveTopComponent() {
        initComponents();
        setName(Bundle.CTL_LiveTopComponent());
        setToolTipText(Bundle.HINT_LiveTopComponent());
        DeviceManager.addListener(this);
    }
    class LiveUpdater implements Runnable {
        private CanFrame frame;
        public LiveUpdater(CanFrame f) {
            frame = f;
        }
        public void run() {
            String dataString = "";
            for (int i = 0; i < frame.getDlc(); i++) {
                dataString = dataString + String.format("%02X ", frame.getData()[i]);
            }
            DefaultTableModel liveModel = (DefaultTableModel) liveTable.getModel();
            boolean inserted = false;
            for (int i = 0; i < liveModel.getRowCount(); i++) {
                if ((int)liveModel.getValueAt(i, 0) == frame.getId()) {
                    liveModel.setValueAt((Object)frame.getDlc(), i, 1);
                    liveModel.setValueAt(dataString, i, 2);    
                    inserted = true;
                }
            }
            if (!inserted) {
                Object[] rowData = {(Object)frame.getId(), (Object)frame.getDlc(), dataString};
                liveModel.addRow(rowData);
            }
        }
    }
    @Override
    public void canReceived(CanFrame f) {
        java.awt.EventQueue.invokeLater(new LiveUpdater(f));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        liveTable = new javax.swing.JTable();

        liveTable.setAutoCreateRowSorter(true);
        liveTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "DLC", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(liveTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable liveTable;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
